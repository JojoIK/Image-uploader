{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Process exiting...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T12:37:17.412Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 1 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:24:25'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui.css',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-bundle.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-standalone-preset.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-init.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/favicon-32x32.png',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-01T12:41:53.181Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T14:41:42.819Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 1 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T14:41:49.002Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 2 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T14:41:50.317Z,
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-01T14:49:20.625Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T14:58:08.469Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 1 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  message: 'S3 connection failed: getaddrinfo EAI_AGAIN dummy-bucket.s3.us-east-1.amazonaws.com',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T14:58:11.684Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 2 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T14:58:14.592Z,
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-01T19:00:34.816Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T19:01:02.812Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 1 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  message: 'S3 connection failed: getaddrinfo EAI_AGAIN dummy-bucket.s3.us-east-1.amazonaws.com',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T19:01:08.849Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 2 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T19:01:14.888Z,
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T19:02:13.473Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 1 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T19:02:19.494Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 2 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T19:02:20.544Z,
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-01T19:24:35.569Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-01T19:51:56.151Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-01T20:00:50.038Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T20:39:59.668Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 1 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T20:40:00.701Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 2 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.pooler.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-01T20:40:01.727Z,
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-01T21:11:21.910Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-01T23:11:55.018Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-02T08:38:00.784Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-02T11:33:33.826Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 1 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-02T11:38:09.825Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Incoming request: GET /docs/',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui.css',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-bundle.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-standalone-preset.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-init.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-02T13:39:41.099Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-03T15:42:56.715Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'TypeError',
  message: "Unhandled Error Cannot read properties of undefined (reading 'UNAUTHORIZED')",
  stack: "TypeError: Cannot read properties of undefined (reading 'UNAUTHORIZED')\n" +
    '    at new UnauthorizedException (C:\\Projects\\image-uploader\\utils\\appError.js:43:35)\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-03T15:59:31.620Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  message: 'Database error:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  target: '$queryRaw',
  timestamp: 2025-07-03T16:05:27.292Z,
  level: 'error'
}
{
  service: 'ImageUploadService',
  clientVersion: '6.10.1',
  errorCode: undefined,
  retryable: undefined,
  name: 'PrismaClientInitializationError',
  level: 'error',
  message: 'Database connection atempt 1 failed:  \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.',
  stack: 'PrismaClientInitializationError: \n' +
    'Invalid `prisma.$queryRaw()` invocation:\n' +
    '\n' +
    '\n' +
    "Can't reach database server at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`\n" +
    '\n' +
    'Please make sure your database server is running at `db.zyrvugjmftgzskdsszmx.supabase.co:5432`.\n' +
    '    at Zn.handleRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:7759)\n' +
    '    at Zn.handleAndLogRequestError (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n' +
    '    at Zn.request (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n' +
    '    at async l (C:\\Projects\\image-uploader\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n' +
    '    at async PrismaService.testConnection (C:\\Projects\\image-uploader\\config\\dbConfig.js:59:17)\n' +
    '    at async C:\\Projects\\image-uploader\\server.js:18:25'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-03T16:06:02.166Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: POST /api/v1/auth/login',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-03T16:09:35.830Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: POST //api/v1/auth/login',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: POST //api/v1/auth/login',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: POST /api/v1/auth/login',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: POST /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-03T17:59:06.399Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: GET /docs/',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui.css',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-bundle.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-init.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-standalone-preset.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /api/v1/api/v1/images/stats',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-04T08:49:02.348Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui.css',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-standalone-preset.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-init.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-bundle.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-04T08:53:30.036Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/api/v1/upload/images/stats',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /api/v1/api/v1/upload/images/stats',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /api/v1/upload/images/stats',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at param (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:600:14)\n' +
    '    at param (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:610:14)\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:664:3)',
  path: '/api/v1/upload/images/stats',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: POST /api/v1/api/v1/auth/register',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: POST /api/v1/api/v1/auth/login',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui.css',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-init.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-standalone-preset.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-bundle.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /api/v1/api/v1/upload/images/stats',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /api/v1/api/v1/upload/images/stats',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: POST /api/v1/upload/images/upload',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/upload/images/upload',
  method: 'POST',
  level: 'error'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-04T09:01:45.832Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui.css',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-bundle.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-standalone-preset.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Incoming request: GET /docs/swagger-ui-init.js',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-04T09:07:49.402Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Closed, cause: None }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/upload/images/stats',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at param (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:600:14)\n' +
    '    at param (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:610:14)\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:664:3)',
  path: '/api/v1/upload/images/stats',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: POST /api/v1/auth/register',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  level: 'warn',
  message: 'Validation failed: %O'
}
{
  message: 'Incoming request: POST /api/v1/auth/login',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  level: 'warn',
  message: 'Validation failed: %O'
}
{
  message: 'Incoming request: POST /api/v1/auth/logout',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/logout',
  method: 'POST',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/auth/me',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/auth/me',
  method: 'GET',
  level: 'error'
}
{
  message: 'Incoming request: POST /api/v1/upload/images/upload',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/upload/images/upload',
  method: 'POST',
  level: 'error'
}
{
  message: 'Incoming request: POST /api/v1/upload/images/upload/multiple',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/upload/images/upload/multiple',
  method: 'POST',
  level: 'error'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  timestamp: 2025-07-04T09:15:47.473Z,
  message: 'Database error:  Error in PostgreSQL connection: Error { kind: Io, cause: Some(Os { code: 10054, kind: ConnectionReset, message: "An existing connection was forcibly closed by the remote host." }) }',
  target: 'quaint::connector::postgres::native',
  level: 'error'
}
{
  message: 'Incoming request: GET /api/v1/upload/images',
  level: 'info',
  service: 'ImageUploadService'
}
{
  service: 'ImageUploadService',
  name: 'Error',
  message: 'Unhandled Error No token provided',
  stack: 'Error: No token provided\n' +
    '    at authenticateUser (C:\\Projects\\image-uploader\\middlewares\\authentication.js:12:21)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:157:13)\n' +
    '    at Route.dispatch (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\route.js:117:3)\n' +
    '    at handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:435:11)\n' +
    '    at Layer.handleRequest (C:\\Projects\\image-uploader\\node_modules\\router\\lib\\layer.js:152:17)\n' +
    '    at C:\\Projects\\image-uploader\\node_modules\\router\\index.js:295:15\n' +
    '    at processParams (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:582:12)\n' +
    '    at next (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:291:5)\n' +
    '    at Function.handle (C:\\Projects\\image-uploader\\node_modules\\router\\index.js:186:3)',
  path: '/api/v1/upload/images',
  method: 'GET',
  level: 'error'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs available at /docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Testing DB connection...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'S3 connection failed: UnknownError',
  level: 'error',
  service: 'ImageUploadService'
}
{
  message: 'Database connection established successfully',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Server running on ::: 3000',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Swagger docs: http://localhost:3000/docs',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Gracefully shutting down...',
  level: 'info',
  service: 'ImageUploadService'
}
{
  message: 'Database disconnected successfully',
  level: 'info',
  service: 'ImageUploadService'
}
