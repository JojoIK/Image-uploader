generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  username      String?         @unique
  password      String
  firstName     String?
  lastName      String?
  avatar        String?
  role          Role            @default(USER)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  images        Image[]
  UploadSession UploadSession[]

  @@map("users")
}

model Image {
  id               String           @id @default(uuid())
  filename         String
  originalName     String
  mimeType         String
  size             Int
  width            Int?
  height           Int?
  s3Key            String           @unique
  s3Url            String
  s3Bucket         String
  description      String?
  altText          String?
  tags             String[]
  processingStatus ProcessingStatus @default(PENDING)
  userId           String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User?            @relation(fields: [userId], references: [id])
  processedImages  ProcessedImage[]

  @@index([userId])
  @@index([createdAt])
  @@index([processingStatus])
  @@map("images")
}

model ProcessedImage {
  id              String           @id @default(uuid())
  originalImageId String
  type            ProcessingType
  width           Int?
  height          Int?
  format          ImageFormat
  quality         Int?
  size            Int
  s3Key           String           @unique
  s3Url           String
  s3Bucket        String
  parameters      Json?
  status          ProcessingStatus @default(COMPLETED)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  originalImage   Image            @relation(fields: [originalImageId], references: [id], onDelete: Cascade)

  @@index([originalImageId])
  @@index([type])
  @@index([status])
  @@map("processed_images")
}

model UploadSession {
  id            String              @id @default(uuid())
  sessionToken  String              @unique
  totalFiles    Int
  uploadedFiles Int                 @default(0)
  failedFiles   Int                 @default(0)
  status        UploadSessionStatus @default(IN_PROGRESS)
  userId        String?
  metadata      Json?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  expiresAt     DateTime
  user          User?               @relation(fields: [userId], references: [id])

  @@index([sessionToken])
  @@index([userId])
  @@index([status])
  @@map("upload_sessions")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ProcessingType {
  THUMBNAIL
  MEDIUM
  LARGE
  CUSTOM
  WATERMARK
  CROP
  RESIZE
  COMPRESS
}

enum ImageFormat {
  JPEG
  PNG
  WEBP
  GIF
}

enum UploadSessionStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
  EXPIRED
}
